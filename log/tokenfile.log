/**/

/*void fillMatrix ( int array [ ] , int row , int col ) ; */
VOID IDENTIFIER OPENPARAN INT IDENTIFIER [ ] , INT IDENTIFIER , INT IDENTIFIER CLOSEPARAN SEMI 
/*int main ( ) */
INT IDENTIFIER OPENPARAN CLOSEPARAN 
/*{ */
OPENBRACE 
/*int A [ 25 ] , B [ 25 ] , C [ 25 ] ; */
INT IDENTIFIER [ CONSTANT ] , IDENTIFIER [ CONSTANT ] , IDENTIFIER [ CONSTANT ] SEMI 
/*int rowACalc , colBCalc , innerValue ; */
INT IDENTIFIER , IDENTIFIER , IDENTIFIER SEMI 
/*int aRow = 5 , aCol = 5 , bRow = 5 , bCol = 5 ; */
INT IDENTIFIER = CONSTANT , IDENTIFIER = CONSTANT , IDENTIFIER = CONSTANT , IDENTIFIER = CONSTANT SEMI 
/*fillMatrix ( A , aRow , aCol ) ; */
IDENTIFIER OPENPARAN IDENTIFIER , IDENTIFIER , IDENTIFIER CLOSEPARAN SEMI 
/*fillMatrix ( B , bRow , bCol ) ; */
IDENTIFIER OPENPARAN IDENTIFIER , IDENTIFIER , IDENTIFIER CLOSEPARAN SEMI 
/*for ( rowACalc = 0 ; rowACalc < aRow ; rowACalc ++ ) */
FOR OPENPARAN IDENTIFIER = CONSTANT SEMI IDENTIFIER < IDENTIFIER SEMI IDENTIFIER INC_OP CLOSEPARAN 
/*{ */
OPENBRACE 
/*for ( colBCalc = 0 ; colBCalc < bCol ; colBCalc ++ ) */
FOR OPENPARAN IDENTIFIER = CONSTANT SEMI IDENTIFIER < IDENTIFIER SEMI IDENTIFIER INC_OP CLOSEPARAN 
/*{ */
OPENBRACE 
/*C [ ( rowACalc * bCol ) + colBCalc ] = 0 ; */
IDENTIFIER [ OPENPARAN IDENTIFIER * IDENTIFIER CLOSEPARAN + IDENTIFIER ] = CONSTANT SEMI 
/*for ( innerValue = 0 ; innerValue < aCol ; innerValue ++ ) */
FOR OPENPARAN IDENTIFIER = CONSTANT SEMI IDENTIFIER < IDENTIFIER SEMI IDENTIFIER INC_OP CLOSEPARAN 
/*{ */
OPENBRACE 
/*C [ ( rowACalc * bCol ) + colBCalc ] = C [ ( rowACalc * bCol ) + colBCalc ] + ( A [ ( rowACalc * aCol ) + innerValue ] * B [ ( innerValue * bCol ) + colBCalc ] ) ; */
IDENTIFIER [ OPENPARAN IDENTIFIER * IDENTIFIER CLOSEPARAN + IDENTIFIER ] = IDENTIFIER [ OPENPARAN IDENTIFIER * IDENTIFIER CLOSEPARAN + IDENTIFIER ] + OPENPARAN IDENTIFIER [ OPENPARAN IDENTIFIER * IDENTIFIER CLOSEPARAN + IDENTIFIER ] * IDENTIFIER [ OPENPARAN IDENTIFIER * IDENTIFIER CLOSEPARAN + IDENTIFIER ] CLOSEPARAN SEMI 
/*} */
CLOSEBRACE 
/*} */
CLOSEBRACE 
/*} */
CLOSEBRACE 
/*return 0 ; */
RETURN CONSTANT SEMI 
/*} */
CLOSEBRACE 
/*void fillMatrix ( int array [ ] , int row , int col ) */
VOID IDENTIFIER OPENPARAN INT IDENTIFIER [ ] , INT IDENTIFIER , INT IDENTIFIER CLOSEPARAN 
/*{ */
OPENBRACE 
/*int irow , icol ; */
INT IDENTIFIER , IDENTIFIER SEMI 
/*for ( irow = 0 ; irow < row ; irow ++ ) */
FOR OPENPARAN IDENTIFIER = CONSTANT SEMI IDENTIFIER < IDENTIFIER SEMI IDENTIFIER INC_OP CLOSEPARAN 
/*{ */
OPENBRACE 
/*for ( icol = 0 ; icol < col ; icol ++ ) */
FOR OPENPARAN IDENTIFIER = CONSTANT SEMI IDENTIFIER < IDENTIFIER SEMI IDENTIFIER INC_OP CLOSEPARAN 
/*{ */
OPENBRACE 
/*array [ ( irow * col ) + icol ] = ( icol + irow ) + 1 ; */
IDENTIFIER [ OPENPARAN IDENTIFIER * IDENTIFIER CLOSEPARAN + IDENTIFIER ] = OPENPARAN IDENTIFIER + IDENTIFIER CLOSEPARAN + CONSTANT SEMI 
/*} */
CLOSEBRACE 
/*} */
CLOSEBRACE 
/*} */
CLOSEBRACE 
